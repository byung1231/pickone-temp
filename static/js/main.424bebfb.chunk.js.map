{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Style","inputOdd","inputEven","picked","App","props","changeCount","type","newCount","state","count","document","getElementById","setAttribute","maxCount","setState","enableIncrement","minCount","enableDecrement","ReactDOM","render","generateForms","inputs","i","boxID","boxType","boxClass","refArray","React","createRef","push","class","id","onChange","handleChange","bind","disabled","running","ref","onKeyDown","handleKeyPress","e","parseInt","target","substring","key","keyCode","current","focus","resetInputStyles","validateInputs","isEmpty","inputValues","alert","generateRandomNumber","randomRaw","Math","random","round","pickOne","numOfLoops","currCount","randomNumber","startTime","setTimeout","lastRandomNumber","defaultCount","Array","animationActive","inputID","this","value","onClick","Component","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.424bebfb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst Style ={\n\n  inputOdd : \"inputOdd\",\n  inputEven : \"inputEven\",\n  picked: \"picked\"\n\n};\n\n// simplified:  no scrolling? but 10 choices instead\n\n\nclass App extends React.Component{\n\n  constructor(props){\n\n    super(props);\n\n    this.defaultCount = 3;\n    this.maxCount = 10;\n    this.minCount = 2;\n    this.lastRandomNumber = 0; // used to reset the input box color for the next run\n    this.inputValues = new Array(this.maxCount);\n\n    //this.refArray = new Array(this.maxCount)\n\nthis.refArray = new Array(this.maxCount+1);\n\n\n    /*\n    NOTE:\n    Use state to store data if it is involved in rendering or data flow (i.e. if its used directly or indirectly in render method)\n    Use other instance fields to store data if value is NOT involved in rendering or data flow (to prevent rendering on change of data) e.g. to store a timer ID that is not used in render method. See TimerID example in official docs to understand this valid case.\n    */\n\n    this.state = { count: this.defaultCount,\n                  enableIncrement: true,\n                  enableDecrement: true,\n                  animationActive:false,\n                  running: false\n                };\n\n\n  }\n\n  changeCount = (type) => {\n\n    let newCount = this.state.count;\n\n    switch(true){\n      case(type == \"increment\"):\n        newCount += 1;\n        document.getElementById(\"Input\"+newCount).setAttribute(\"type\",\"text\");\n        break;\n\n      case(type == \"decrement\"):\n        // must hide the last box BEFORE decreasing the count\n        document.getElementById(\"Input\"+newCount).setAttribute(\"type\",\"hidden\");\n        newCount -= 1;\n        break;\n    }\n\n    // increment button\n    if (newCount >= this.maxCount) {\n        this.setState({enableIncrement: false});\n    }\n    else{\n        this.setState({enableIncrement: true});\n    }\n\n    // decrement button\n    if (newCount <= this.minCount) {\n      this.setState({enableDecrement: false});\n    }\n    else{\n      this.setState({enableDecrement: true});\n    }\n\n\n    this.setState({count:newCount});\n\n    // REMOVE FOR PROD\n    ReactDOM.render(<p>showing/hiding Input{newCount}, type:{type}</p>, document.getElementById('placeholder'));\n      //  document.getElementById(\"Input\"+newCount).setAttribute(\"type\",\"text\");\n\n\n  }\n\n/*\n  incrementCount = () => {\n\n    let newCount = this.state.count;\n    newCount += 1;\n\n    this.setState({count:newCount});\n\n    if (newCount >= this.maxCount) {\n      this.setState({enableIncrement: false});\n    }\n    else{\n      this.setState({enableIncrement: true});\n    }\n\n    if (newCount > this.minCount) {\n      this.setState({enableDecrement: true});\n    }\n\n// REMOVE FOR PROD\nReactDOM.render(<p>showing Input{newCount}</p>, document.getElementById('placeholder'));\n    document.getElementById(\"Input\"+newCount).setAttribute(\"type\",\"text\");\n\n\n  }\n\n\n\n  decrementCount = () => {\n\n    let newCount = this.state.count;\n    newCount -= 1;\n    this.setState({count:newCount});\n\n    if (newCount <= this.minCount) {\n      this.setState({enableDecrement: false});\n    }\n    else{\n      this.setState({enableDecrement: true});\n    }\n\n    if (newCount < this.maxCount) {\n      this.setState({enableIncrement: true});\n    }\n\n    var inputID = \"Input\" + (newCount + 1);\n\n    ReactDOM.render(<p>hiding {inputID}</p>, document.getElementById('placeholder'));\n    document.getElementById(inputID).setAttribute(\"type\",\"hidden\");\n\n  }\n*/\n\n\n  // keeping track of user inputs to validate them later\n  handleChange(e) {\n\n\n//this.state.inputValues.map(item => ())\n  //   inputValues\n\n    // let temp = this.state.inputValue.slice(0, -this.lastInputAdded.length)\n\n     //this.setState({inputValue: temp.concat(e.target.value)});\n\n     // use array\n\n\nlet inputID = e.target.id.substring(5)\n\nif (inputID){\n\n\n\n  //alert(inputID) //->use this as keys\n\n  this.inputValues[inputID]=  e.target.value\n\n}\n\n\n\n   }\n\n// generates input boxes\n  generateForms = () => {\n      const inputs = [];\n      const div = []; // dummy div to scroll the container programatically\n\n      for (var i = 1; i <= this.maxCount; i++){\n\n        let boxID = \"Input\"+(i);\n        let boxType = \"text\";\n        let boxClass = Style.inputOdd;\n\n        let divID = \"Div\"+(i);\n\n        // hiding the boxes that are....\n        if (i > this.state.count ){\n          boxType = \"hidden\"\n        }\n\n        // alternating color schemes for boxes\n        if (i % 2 == 0){\n          boxClass = Style.inputEven\n        }\n\n        // remove bottom border for the very last box for cleaner look\n        if (i == this.maxCount){\n          boxClass += \" inputLast\"\n        }\n\n        this.refArray[i] = React.createRef();\n\n        inputs.push(<input type={boxType}  class={boxClass} id={boxID} onChange={this.handleChange.bind(this)} disabled={this.state.running}\n        ref ={this.refArray[i]} //{(ref) => {this.refArray[i] = ref}}\n      /*  onKeyPress={event => {\n              this.handleKeyPress(event)\n\n            }}*/\n            onKeyDown = {this.handleKeyPress}\n              ></input>);\n            //  ReactDOM.render(<p>ref:{this.currRef}</p>, document.getElementById('placeholder'));\n\n      }\n      return(\n        <form>{inputs}</form>\n      )\n\n\n\n  }\n\n  // up = 38\n  // down= 40\n  // if e.keyCode == '38'\n  // tab key : (e.key === 'Tab')\n\n// tab is already handled by browesers - no need to add\n  handleKeyPress = (e) => {\n\n    let i = parseInt(e.target.id.substring(5))\n\n        if ((e.key === 'Enter') || (e.keyCode == '40')) {\n\n          // enter key and last input box\n          if((e.key === 'Enter') && (i == this.state.count)&& (i < this.maxCount)) {\n            this.changeCount(\"increment\")\n\n          }\n\n          if(i < this.maxCount){\n              this.refArray[i+1].current.focus()\n          }\n\n      }\n\n      else if((e.keyCode == '38') && (i > 1)){\n\n        this.refArray[i-1].current.focus()\n\n\n      }\n\n\n\n\n\n    ReactDOM.render(<p>i:{i}</p>, document.getElementById('placeholder'));\n\n\n\n\n  }\n\n  resetInputStyles = () => {\n\n    for(let i = 1; i <= this.maxCount; i++){\n\n      let boxClass = Style.inputOdd\n\n      if (i % 2 == 0){\n        boxClass = Style.inputEven\n      }\n\n      document.getElementById(\"Input\"+i).setAttribute(\"class\", boxClass);\n\n    }\n\n  }\n  validateInputs = () => {\n\n    let isEmpty = true;\n\n    for(const input of this.inputValues){\n      if(input != null){\n        isEmpty = false\n      }\n    }\n\n    if (isEmpty){\n\n      alert(\"Please check your inputs!\");\n      return false\n    }\n\n    return true\n\n  }\n\n\n  generateRandomNumber = () => {\n\n    var randomRaw = Math.random()\n    var random = 1 + (randomRaw * (this.state.count-1));\n    // adding 1 b/c minimum has to be 1 (input box IDs start from 1)\n    // subtracing 1 b/c the max has to be this.state.count (e.g. 3)\n\n    ReactDOM.render(\"randomRaw: \" + randomRaw, document.getElementById('test'));\n\n    return Math.round(random);\n  }\n\n\n   pickOne = () =>{\n\n     if(this.validateInputs()){\n       this.setState({running:true});\n\n       this.resetInputStyles();\n\n       // reset the color for the last chosen box, if not being ran for the first time\n    /*   if(this.lastRandomNumber > 0){\n          document.getElementById(\"Input\"+this.lastRandomNumber).style.backgroundColor=\"inherit\"\n       }\n*/\n       let count = 0\n       //let interval = 100 + (this.currCount * count)\n       let interval = 100\n       let numOfLoops = 5\n       let currCount = this.state.count;\n       let randomNumber = this.generateRandomNumber()\n\n       // decreasing the number of animations depending on the # of choices\n       switch (true){\n         case (currCount >= 10):\n            numOfLoops = 3;\n            break;\n         case (currCount >= 5):\n            numOfLoops = 4;\n            break;\n       }\n\n       // animation for the boxes\n       while (count < numOfLoops) {\n\n         let startTime = interval * ((this.state.count * 2 * count)-(2*count))\n          //take 2 out from the times for first and last boxes (since they are only visited once)\n\n        setTimeout(() => {\n            // ReactDOM.render(\"currCount: \" + this.state.count + \", startTime: \" + startTime.toString(), document.getElementById('placeholder'));\n             ReactDOM.render(\"rand: \" + randomNumber, document.getElementById('placeholder'));\n           },\n           startTime);\n\n\n           //NEW APPROACH: SEPARATE GOING UP AND down\n\n           // going down\n           for(let i = 0; i < currCount; i++){\n\n             let boxClass = Style.inputOdd\n\n             let divID = \"Div\"+(i+1)\n             let boxID = \"Input\"+(i+1)\n             // alternating color schemes for boxes\n             //use i instead of i+1, b/c it is only used to restore previous boxes\n             if (i % 2 == 0){\n               boxClass = Style.inputEven\n             }\n              // Step 1: Change color (going down)\n             if (i < currCount - 1){\n\n               setTimeout(() => {\n                document.getElementById(\"Input\"+(i+1)).setAttribute(\"class\", Style.picked);\n                //this.divID.scrollIntoView({\n                //  behavior:'smooth'\n                //})\n                //.style.backgroundColor=this.secondaryColor\n //document.getElementById(\"Input\"+(i+1)).style.backgroundColor=\"brown\";\n\n               },\n               startTime + interval*i);\n\n             }\n\n             // Step 2: restore color for the previous box\n             if (i > 0) {\n               setTimeout(() => {\n                   document.getElementById(\"Input\"+i).setAttribute(\"class\", boxClass);\n                  // document.getElementById(\"Input\"+i).style.backgroundColor=\"inherit\";\n                 },\n                 startTime + interval*i);\n             }\n           }\n\n          startTime += interval*(currCount-2)\n\n           // going back up\n           for(let i = currCount; i > 0; i--){\n\n             let boxClass = Style.inputOdd\n\n             // alternating color schemes for boxes\n             //use i+1 instead of i+1, b/c it is only used to restore previous boxes\n             if ((i+1) % 2 == 0){\n               boxClass = Style.inputEven\n             }\n\n             // Step 3: Change color (coming back up from the bottom)\n             setTimeout(() => {\n                      document.getElementById(\"Input\"+i).setAttribute(\"class\", Style.picked); //.style.backgroundColor=this.secondaryColor\n               },\n               startTime + (interval * (currCount - i + 1))\n             )\n               // subtracting 1 at the end, for the bottom box, b/c otherwise the time would be double counted\n               // b/c the bottom box is executed twice from steps 1 and 3.\n               // so that means e.g. if count = 3, and if we dont subtract -1,\n               // then it would be executed both for both times: interval * 3 (i = 0; step 3) and interval * 2 (i = 2; step 1)\n\n\n\n             // Step 4: Restore the color again\n             if ((i + 1) <= currCount) {\n               setTimeout(() => {\n                   document.getElementById(\"Input\"+(i+1)).setAttribute(\"class\", boxClass);\n                 },\n               startTime +  (interval * (currCount - i+1))\n             )\n           }\n\n\n             if ((count == numOfLoops - 1) && ( i == randomNumber )){\n  ReactDOM.render(\"i: \" + i, document.getElementById('placeholder'));\n               break;\n             }\n\n           }\n       // re-enabling the buttons after all the actions\n             // only run once\n             if((count == numOfLoops - 1)){// && (i == currCount + 1)){\n               setTimeout(() => {\n                   this.setState({running:false})\n                 }\n                 ,\n                 startTime + (currCount * interval * 2))\n             }\n\n\n             count += 1;\n\n\n         } //end of the while loop\n\n         this.lastRandomNumber = randomNumber\n     }\n\n\n\n\n    }\n\n\n  render(){\n    return(\n      <div>\n      <div id=\"midRowDiv\">\n        <div id=\"sideButtonsLeft\">\n          <ul class=\"sideButtonsList\">\n            <li><button type=\"button\" class=\"sideButton\" onClick={()=>this.changeCount(\"increment\")}  disabled={!this.state.enableIncrement || this.state.running}>+</button></li>\n            <li id=\"lblCount\">{this.state.count}</li>\n            <li><button type=\"button\" class=\"sideButton\" onClick={()=>this.changeCount(\"decrement\")} disabled={!this.state.enableDecrement || this.state.running}>-</button></li>\n          </ul>\n        </div><div id=\"form\">\n          {this.generateForms()}\n        </div><div id=\"sideButtonsRight\">\n          <ul class=\"sideButtonsList\">\n            <li><button type=\"button\" class=\"sideButton\" onClick={()=>alert(\"Delete\")} disabled={this.state.running}>D</button></li>\n          </ul>\n        </div>\n      </div>\n        <div class=\"clearer\"></div>\n\n        <div id=\"pickButtonDiv\">\n          <button type=\"button\" class=\"pickButton\" onClick={this.pickOne} disabled={this.state.running}>Pick One!</button>\n        </div>\n    </div>\n    );\n\n  }\n\n}\n\n\nexport { App};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('centerDiv'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}